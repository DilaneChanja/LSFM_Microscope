# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import warnings
warnings.simplefilter(action='ignore', category=UserWarning)

import sys

from PyQt5.QtGui import *

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os
from pyqtgraph import PlotWidget
import numpy as np
#from skimage.transform import downscale_local_mean
import time
#import matplotlib.pyplot as plt
import Controller
import SequenceAcquisition
import FastForward
from WaitingSpinnerWidget import QtWaitingSpinner
from AutoFocus_Schrittweite import AutoFocus_Dialog
from FlimParameterDialog import FlimParameter_Dialog
from Auto_Focus import ira
import resource

# Global values
currentLaser = 1
progressBarValue = 0
counter = 0
jumper = 0
laser1ON = False
laser2ON = False
laser3ON = False
laser1Value = 0
controllerValues = ["X Controller", "Y Controller", "Z Controller", "Focus Controller"]
oldControllersValues = {"X Controller": 0, "Y Controller": 0, "Z Controller": 0, "Focus Controller": 0}
controllers = {"X Controller": 0, "Y Controller": 1, "Z Controller": 3, "Focus Controller": 4}
controllerMethodValues = ["Absolut Bewegung", "Relativ Bewegung"]
controllerMethodSelected = False
controllerSelected = False
focusControllerSelected = False
combobox2_text = ""
positionTarget = 0
exposureParameter = {"ExposureTime": 0,
                     "DelayTime": 0}

ActualLaserParameter = {"LaserTyp": '',
                        "LaserPower": 0}
delayTime = 0
positionValue = 0.0
liveModus = False
liveModusAction = 0
# Global value for the windows status
WINDOWS_SIZE = 0

rotationScalar = 0
LASER = {'blue': 1,
         'red': 2,
         'purple':3 }

laser1OperatingMode = 0
laser1ActualmodulationMode = 0

laser2OperatingMode = 0
laser2ActualmodulationMode = 0

LaserOperatingMode = ["ACC", "APC"]

LaserPulseMOdulation = {"Emission Standby":0,
                        "ACC Mode- No Modulation Active":1,
                        "APC Mode- No Modulation Active":2,
                        "ACC Mode- Analog Modulation Active":3,
                        "Digital and Analog modulation active":4}

LiveMode = {"Intensity":1,
            "Color-Mode": 2}

currentLiveMode = 1
imageFrame = None
actPosition = None
cursorPosition = [0, 0]
histogrammView = None
listOfCameras = []

listControllersView = {"X Controller": 0,
                       "Y Controller": 1,
                       "Z Controller": 2,
                       "Focus Controller": 3}

controllersMethod = {"Absolut Bewegung": 1,
                     "Relativ Bewegung": 2}

PhaseNumber = {"Two":1,
               "Four":2,
               "Eight":3,
               "Sixteen":4}

current_action = 0
spinbox_value = 0

actionText = ""
xValue = yValue = dz_value = image_count = focusUp_value = focusDown_value = zUp_value = zDown_value = 0
fastForward = False
acquisitionPath = None
camera = ""
isZstage = False

focusCount = 0

zoomfactor = 1

lcdNumber = None

zooDisplay = None

listofPositions = {}

zoomModus = False

autoFocusON = False

autoFocusDict = {}
startRecorder = None
dialogClose = False

lastLaserActif = {}
savePicturePath = None
notConnectedHardware = []
filterParameter = None
isAcquisitionRunning = False
cameraType = 1
phaseNumber = 1

def connect_hardware():
    global listOfCameras, actPosition, exposureParameter, listofPositions,notConnectedHardware,filterParameter,cameraType

    Controller.Connect()
    listOfCameras, arrayValue = Controller.GetConnectedCamera()
    if (len(arrayValue) != 0):
        cameraType = arrayValue[0]

    actPosition = Controller.GetStagesPosition()
    listofPositions = Controller.GetAllPositionsName()
    actFilterPosition = Controller.GetActualFilterPosition()
    filterParameter = listofPositions[actFilterPosition]
    notConnectedHardware = Controller.GetListofNotConnectedHardware()

    return


class Thread(QThread):
    changePixmap = pyqtSignal(QPixmap, list, list)

    def __del__(self):
        self.wait()

    def run(self):
        global histogrammView, liveModus, liveModusAction, rotationScalar, zoomModus, cursorPosition, zoomfactor, autoFocusON, autoFocusDict,actPosition,currentLiveMode,cameraType

        now = time.time()
        future = now + 1.5
        x0 = 0
        y0 = 0
        zf_old = 1
        w_display = -1
        w_pixmap = 1000
        while True:
            try:
                image = Controller.Live_View(cameraType)

                if(type(image) == type(None)):
                    pass

                else:
                    if w_display == -1:
                        w_display = image.shape[-1]
                        w = w_display

                    if (currentLiveMode == 2):
                        print("Color Mode activ")
                     #   image = imageColor


                    y, x = np.histogram(image, bins=np.linspace(0, 65535, 256))

                    # I0 = np.quantile(image, 0.01)
                    # I1 = np.quantile(image, 0.99)
                    # if I0 == I1:
                    #     I1 = I0 + 1
                    # image[image < I0] = I0
                    # image[image > I1] = I1
                    #
                    # It0 = 0.01
                    # It1 = 0.99

                    #image = (255. * (image - I0) * (It1 - It0) / (I1 - I0) + It0).astype('uint8')

                    image = np.uint8(255.* (image/65535))



                    image = np.rot90(image, k=rotationScalar)

                    # transform = QTransform().rotate(rotationScalar*90)
                    # pixmap = pixmap.transformed(transform)

                    if (zoomModus):
                        if zoomfactor != zf_old:
                            zf_old = zoomfactor
                            xp = cursorPosition[0]
                            yp = cursorPosition[1]
                            print("xp = {} yp = {}".format(xp, yp))
                            print("Zoomfactor = {}".format(zoomfactor))

                            xb = x0 + int(xp * (w / w_pixmap))
                            yb = y0 + int(yp * (w / w_pixmap))
                            w = int(w_display / zoomfactor)
                            # xb = x0+int(xp * (w_display / w_pixmap))
                            # yb = y0+int(yp * (w_display / w_pixmap))

                            print("xb ={} , yb = {} ".format(xb, yb))
                            x0 = int(max((xb - w / 2.), 0))
                            y0 = int(max((yb - w / 2.), 0))

                            print("w = {}".format(w))
                            x1 = x0 + w
                            y1 = y0 + w

                            if x1 > w_display:
                                x1 = w_display
                                x0 = x1 - w
                            if y1 > w_display:
                                y1 = w_display
                                y0 = y1 - w
                            print("y0 ={} y1 = {} x0={} x1={} ".format(y0, y1, x0, x1))

                        image = image[y0: y1, x0:x1]
                    else:
                        x0 = 0
                        y0 = 0
                        x1 = w_display
                        y1 = w_display
                        w = w_display
                        zf_old = 1

                    # image = np.uint16(downscale_local_mean(image, (4, 4)))

                    ## Using stepMode=True causes the plot to draw two lines for each sample.
                    ## notice that len(x) == len(y)+1

                    # image = np.transpose(image).copy()
                    image = image.copy()

                    # height = image.shape[0] /2
                    # width = image.shape[1]/2
                    qImage = QImage(image, image.shape[0], image.shape[1], QImage.Format_Indexed8)
                    pixmap = QPixmap(qImage)
                    pixmap = pixmap.scaledToHeight(512)

                    # pixmap = pixmap.scaled(512, 512, Qt.IgnoreAspectRatio, Qt.FastTransformation)
                    # pixmap_label.setPixmap(pixmap)
                    self.changePixmap.emit(pixmap, y.tolist(), x.tolist())



                    if liveModus == False:
                        break
            except Exception as e:
                print(e)
                QMessageBox.about(w, "Error", "Error Duriing the LiveModus")
                liveModus = False
                break





    def stop(self):
        self.threadactive = False
        self.is_killed = True


class SpinnerThread(QRunnable):
    def __init__(self, dialog):
        QRunnable.__init__(self)
        self.w = dialog

    def LaserPowerConfiguration(self, status):
        global ActualLaserParameter,laser1ON,laser2ON,w,laser3ON
        if(status):
            if (ActualLaserParameter["LaserTyp"] == 'blue'):
                while (True):
                    try:
                        Controller.LaserOn(LASER['blue'])
                        w.laserPowerButton.setChecked(True)
                        Controller.SetPower(488, ActualLaserParameter["LaserPower"])
                        w.setValueToProgressbar(ActualLaserParameter["LaserPower"])
                        w.laserSlider.setValue(ActualLaserParameter["LaserPower"])
                        w.laserSlider.setEnabled(True)
                        laser1ON = True

                        break
                    except Exception:
                        pass

            elif (ActualLaserParameter["LaserTyp"] == 'red'):
                while (True):
                    try:
                        Controller.LaserOn(LASER['red'])
                        w.laserPowerButton.setChecked(True)
                        Controller.SetPower(638, ActualLaserParameter["LaserPower"])
                        w.setValueToProgressbar(ActualLaserParameter["LaserPower"])
                        w.laserSlider.setValue(ActualLaserParameter["LaserPower"])
                        w.laserSlider.setEnabled(True)
                        laser2ON = True
                        break
                    except Exception:
                        pass
            else:
                while (True):
                    try:
                        Controller.LaserOn(LASER['purple'])
                        w.laserPowerButton.setChecked(True)
                        Controller.SetPower(455, ActualLaserParameter["LaserPower"])
                        w.setValueToProgressbar(ActualLaserParameter["LaserPower"])
                        w.laserSlider.setValue(ActualLaserParameter["LaserPower"])
                        w.laserSlider.setEnabled(True)
                        laser3ON = True
                        break
                    except Exception:
                        pass
                
        else:
            if (ActualLaserParameter["LaserTyp"] == 'blue'):
                while (True):
                    try:
                        Controller.LaserOff(LASER['blue'])
                        w.setValueToProgressbar(0)
                        w.laserSlider.setValue(0)
                        w.laserSlider.setEnabled(False)
                        w.laserPowerButton.setChecked(False)
                        laser1ON = False
                        break
                    except Exception:
                        pass

            elif(ActualLaserParameter["LaserTyp"] == 'red'):
                while (True):
                    try:
                        Controller.LaserOff(LASER['red'])
                        w.setValueToProgressbar2(0)
                        w.laserSlider.setValue(0)
                        w.laserSlider.setEnabled(False)
                        w.laserPowerButton.setChecked(False)
                        laser2ON = False
                        break
                    except Exception:
                        pass

            else:
                while (True):
                    try:
                        Controller.LaserOff(LASER['purple'])
                        w.setValueToProgressbar2(0)
                        w.laserSlider.setValue(0)
                        w.laserSlider.setEnabled(False)
                        w.laserPowerButton.setChecked(False)
                        laser3ON = False
                        break
                    except Exception:
                        pass



        return


    def run(self):
        global xValue, yValue, dz_value, image_count, camera, listOfCameras, focusUp_value, focusDown_value, zUp_value, zDown_value, acquisitionPath, exposureParameter, \
            ActualLaserParameter, current_action, spinbox_value, lcdNumber, positionTarget, lastLaserActif,LASER,savePicturePath,filterParameter,cameraType,laser1ON,laser2ON,\
            laser3ON,currentLaser, phaseNumber,w,liveModus


        print(ActualLaserParameter)

        if (current_action == 0):


            if (currentLaser == 1):
                laser1ON = False

            elif (currentLaser == 2):
                laser2ON = False

            else:
                laser3ON = False

            w.powerValue_initialisation()
            if (liveModus == True):
                w.StartLiveView(0)
            time.sleep(1)
            savePicturePath = Controller.StartSequenceAquisition(cameraType, acquisitionPath, zUp_value, zDown_value,
                                               xValue,
                                               yValue, focusUp_value, focusDown_value,
                                               image_count,
                                               dz_value, exposureParameter, ActualLaserParameter, filterParameter,phaseNumber)



            Controller.MoveAbsolut(listControllersView["Focus Controller"], focusUp_value, 1)
            Controller.MoveAbsolut(listControllersView["Z Controller"], zUp_value, 1)

            time.sleep(1)
            if (currentLaser == 1):
                laser1ON = True
            elif (currentLaser == 2):
                laser2ON = True
            else:
                laser3ON = True

            w.powerValue_initialisation()
            w.laserPowerButton.setChecked(False)
            Controller.SingleImageAquisition(cameraType,os.path.join(savePicturePath,'dark'))

        elif (current_action == 1):
            Controller.MoveAbsolut(listControllersView[combobox2_text], spinbox_value, 0)
            actPosition = Controller.GetStagesPosition()
            lcdNumber.display(actPosition[combobox2_text])

        elif (current_action == 2):
            Controller.MoveAbsolut(listControllersView[combobox2_text], positionTarget,0)
            actPosition = Controller.GetStagesPosition()
            lcdNumber.display(actPosition[combobox2_text])

        QMetaObject.invokeMethod(self.w, "setData",
                                 Qt.QueuedConnection,
                                 Q_ARG(int, 1))


# class SplaschsreenThread(QThread):
#     hardware_Connection = pyqtSignal(int)
#
#     def __del__(self):
#         self.wait()
#
#
#
#     def stop(self):
#         self.threadactive = False
#         self.is_killed = True
#         self.terminate()
#
#
#     def run(self):
#         connect_hardware()
#
#         self.hardware_Connection.emit(1)


class Dialog1(QDialog):
    def __init__(self, *args, **kwargs):
        global actionText
        QDialog.__init__(self, *args, **kwargs)
        self.setLayout(QVBoxLayout())
        #self.setModal(True)
        self.spinner = QtWaitingSpinner(self)
        self.label = QLabel(actionText, self)
        self.label.setAlignment(Qt.AlignCenter)

        self.layout().addWidget(self.spinner)
        self.layout().addWidget(self.label)
        self.spinner.start()
        runnable = SpinnerThread(self)
        QThreadPool.globalInstance().start(runnable)

    @pyqtSlot(int)
    def setData(self, processStatus):
        global startRecorder,fastForward,savePicturePath,liveModus, isAcquisitionRunning

        if (processStatus):
            self.spinner.stop()
            self.adjustSize()
            self.destroy()
            if(isAcquisitionRunning):
                startRecorder.setStyleSheet("background-color: rgb(0,0,0)")
                Dialog = FastForward.CustomDialog(w)
                ui = FastForward.FastForward_Dialog(savePicturePath, w, liveModus, fastForward)
                isAcquisitionRunning = False
                ui.setupUi(Dialog)
                Dialog.show()
                Dialog.exec_()





    def closeEvent(self, event):
        reply = QMessageBox.question(
            self, "Message",
            "Sequence Acquisition still Running, Are you sure you want to quit? Any unsaved work will be lost.",
            QMessageBox.Close | QMessageBox.Cancel)

        if reply == QMessageBox.Close:
            self.destroy()
        else:
            self.show()



# this class allows  to change the appearance of a button to Switch  ON/OFF button.
class MySwitch(QPushButton):

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setCheckable(True)
        self.setMinimumWidth(150)
        self.setMinimumHeight(22)

    def paintEvent(self, event):
        label = "ON" if self.isChecked() else "OFF"
        bg_color = Qt.green if self.isChecked() else Qt.red

        radius = 10
        width = 32
        center = self.rect().center()

        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.translate(center)
        painter.setBrush(QColor(0, 0, 0))

        pen = QPen(Qt.black)
        pen.setWidth(2)
        painter.setPen(pen)

        painter.drawRoundedRect(QRect(-width, -radius, 2 * width, 2 * radius), radius, radius)
        painter.setBrush(QBrush(bg_color))
        sw_rect = QRect(-radius, -radius, width + radius, 2 * radius)
        if not self.isChecked():
            sw_rect.moveLeft(-width)
        painter.drawRoundedRect(sw_rect, radius, radius)
        painter.drawText(sw_rect, Qt.AlignCenter, label)


class Ui_MainWindow(object):

    def __init__(self, *args, **kwargs):
        super(Ui_MainWindow, self).__init__(*args, **kwargs)
        self.sequenceAcquisitionPath = None
        self.imageAcquisition = None

    @pyqtSlot(QPixmap, list, list)
    def setImage(self, image, y, x):
        self.imageLive.setPixmap(image)
        self.imageLive.repaint()
        self.graphicsView_2.clear()
        self.graphicsView_2.plot(x, y, stepMode=True, fillLevel=0, brush=(0, 0, 255, 150))

    def setupUi(self, MainWindow):
        global histogrammView, imageFrame, lcdNumber,startRecorder
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1444, 900)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(43, 31, 91);")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.main_header = QFrame(self.centralwidget)
        self.main_header.setMaximumSize(QSize(16777215, 50))
        self.main_header.setStyleSheet("QFrame{\n"
                                       "border-bottom: 1px solid #000;\n"
                                       "background-color: rgb(0, 0, 0);\n"
                                       "}")
        self.main_header.setFrameShape(QFrame.WinPanel)
        self.main_header.setFrameShadow(QFrame.Raised)
        self.main_header.setObjectName("main_header")
        self.horizontalLayout_2 = QHBoxLayout(self.main_header)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tittle_bar_container = QFrame(self.main_header)
        self.tittle_bar_container.setFrameShape(QFrame.StyledPanel)
        self.tittle_bar_container.setFrameShadow(QFrame.Raised)
        self.tittle_bar_container.setObjectName("tittle_bar_container")
        self.horizontalLayout_5 = QHBoxLayout(self.tittle_bar_container)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.left_menu_toggle = QFrame(self.tittle_bar_container)
        self.left_menu_toggle.setMinimumSize(QSize(50, 0))
        self.left_menu_toggle.setMaximumSize(QSize(50, 16777215))
        self.left_menu_toggle.setStyleSheet("\n"
                                            "QFrame{\n"
                                            "background-color:#000;\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton{\n"
                                            "padding:5px 10px;\n"
                                            "border:none;\n"
                                            "border-radius: 5px;\n"
                                            "background-color:#000;\n"
                                            "color:#fff;\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton:hover{\n"
                                            "    background-color: rgb(0, 92, 157);\n"
                                            "}")
        self.left_menu_toggle.setFrameShape(QFrame.StyledPanel)
        self.left_menu_toggle.setFrameShadow(QFrame.Raised)
        self.left_menu_toggle.setObjectName("left_menu_toggle")
        self.horizontalLayout_4 = QHBoxLayout(self.left_menu_toggle)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.left_menu_toggle_btn = QPushButton(self.left_menu_toggle)
        self.left_menu_toggle_btn.setMinimumSize(QSize(0, 50))
        self.left_menu_toggle_btn.setMaximumSize(QSize(16777215, 16777215))
        self.left_menu_toggle_btn.setCursor(QCursor(Qt.PointingHandCursor))
        self.left_menu_toggle_btn.setText("")
        icon = QIcon()
        icon.addPixmap(QPixmap(":/icons/icons/cil-menu.png"), QIcon.Normal, QIcon.Off)
        self.left_menu_toggle_btn.setIcon(icon)
        self.left_menu_toggle_btn.setIconSize(QSize(24, 24))
        self.left_menu_toggle_btn.setObjectName("left_menu_toggle_btn")
        self.horizontalLayout_4.addWidget(self.left_menu_toggle_btn)
        self.horizontalLayout_5.addWidget(self.left_menu_toggle)
        self.tittle_bar = QFrame(self.tittle_bar_container)
        self.tittle_bar.setStyleSheet("\n"
                                      "QFrame{\n"
                                      "background-color:#000;\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton{\n"
                                      "padding:5px 10px;\n"
                                      "border:none;\n"
                                      "border-radius: 5px;\n"
                                      "background-color:#000;\n"
                                      "color:#fff;\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:hover{\n"
                                      "    background-color: rgb(0, 92, 157);\n"
                                      "}")
        self.tittle_bar.setFrameShape(QFrame.StyledPanel)
        self.tittle_bar.setFrameShadow(QFrame.Raised)
        self.tittle_bar.setObjectName("tittle_bar")
        self.gridLayout = QGridLayout(self.tittle_bar)
        self.gridLayout.setContentsMargins(12, -1, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.browse_files = QPushButton(self.tittle_bar)
        self.browse_files.setMaximumSize(QSize(60, 58))
        self.browse_files.setCursor(QCursor(Qt.PointingHandCursor))
        self.browse_files.setMouseTracking(False)
        self.browse_files.setText("")
        icon1 = QIcon()
        icon1.addPixmap(QPixmap(":/icons/icons/cil-folder-open.png"), QIcon.Normal, QIcon.Off)
        self.browse_files.setIcon(icon1)
        self.browse_files.setIconSize(QSize(24, 24))
        self.browse_files.setObjectName("browse_files")
        self.gridLayout.addWidget(self.browse_files, 0, 0, 1, 1)
        self.playButton = QPushButton(self.tittle_bar)
        self.playButton.setMaximumSize(QSize(60, 62))
        self.playButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.playButton.setText("")
        icon2 = QIcon()
        icon2.addPixmap(QPixmap(":/icons/icons/cil-media-play.png"), QIcon.Normal, QIcon.Off)
        self.playButton.setIcon(icon2)
        self.playButton.setIconSize(QSize(24, 24))
        self.playButton.setObjectName("playButton")
        self.gridLayout.addWidget(self.playButton, 0, 1, 1, 1)
        self.startRecorder = QPushButton(self.tittle_bar)
        self.startRecorder.setMaximumSize(QSize(60, 56))
        self.startRecorder.setCursor(QCursor(Qt.PointingHandCursor))
        self.startRecorder.setText("")
        icon3 = QIcon()
        icon3.addPixmap(QPixmap(":/icons/icons/cil-media-record.png"), QIcon.Normal, QIcon.Off)
        self.startRecorder.setIcon(icon3)
        self.startRecorder.setIconSize(QSize(24, 24))
        self.startRecorder.setObjectName("startRecorder")
        self.gridLayout.addWidget(self.startRecorder, 0, 2, 1, 1)
        self.rotationButton = QPushButton(self.tittle_bar)
        self.rotationButton.setMaximumSize(QSize(60, 57))
        self.rotationButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.rotationButton.setText("")
        icon4 = QIcon()
        icon4.addPixmap(QPixmap(":/icons/icons/cil-loop-circular.png"), QIcon.Normal, QIcon.Off)
        self.rotationButton.setIcon(icon4)
        self.rotationButton.setIconSize(QSize(24, 24))
        self.rotationButton.setObjectName("rotation")
        self.gridLayout.addWidget(self.rotationButton, 0, 3, 1, 1)
        self.ImageCapture = QPushButton(self.tittle_bar)
        self.ImageCapture.setMaximumSize(QSize(60, 57))
        self.ImageCapture.setCursor(QCursor(Qt.PointingHandCursor))
        self.ImageCapture.setText("")
        icon5 = QIcon()
        icon5.addPixmap(QPixmap(":/icons/icons/cil-camera.png"), QIcon.Normal, QIcon.Off)
        self.ImageCapture.setIcon(icon5)
        self.ImageCapture.setIconSize(QSize(24, 24))
        self.ImageCapture.setObjectName("ImageCapture")
        self.gridLayout.addWidget(self.ImageCapture, 0, 4, 1, 1)
        self.liveModeList = QComboBox(self.tittle_bar)
        self.liveModeList.setMaximumSize(QSize(120, 24))
        self.liveModeList.setStyleSheet("background-color: rgb(184, 183, 189);")
        self.liveModeList.setObjectName("comboBox")
        self.liveModeList.addItem("Intensity")
        self.liveModeList.addItem("Color-Mode")
        self.gridLayout.addWidget(self.liveModeList, 0, 5, 1, 1)
        self.horizontalLayout_5.addWidget(self.tittle_bar)
        self.horizontalLayout_2.addWidget(self.tittle_bar_container)
        self.top_right_btns = QFrame(self.main_header)
        self.top_right_btns.setMaximumSize(QSize(100, 16777215))
        self.top_right_btns.setStyleSheet("QPushButton{\n"
                                          "    border-radius: 5px;\n"
                                          "}\n"
                                          "QPushButton:hover{\n"
                                          "    background-color: rgb(0, 92, 157);\n"
                                          "}")
        self.top_right_btns.setFrameShape(QFrame.StyledPanel)
        self.top_right_btns.setFrameShadow(QFrame.Raised)
        self.top_right_btns.setObjectName("top_right_btns")
        self.horizontalLayout_3 = QHBoxLayout(self.top_right_btns)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.restoreButton = QPushButton(self.top_right_btns)
        self.restoreButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.restoreButton.setText("")
        icon6 = QIcon()
        icon6.addPixmap(QPixmap(":/icons/icons/cil-window-restore.png"), QIcon.Normal, QIcon.Off)
        self.restoreButton.setIcon(icon6)
        self.restoreButton.setIconSize(QSize(24, 24))
        self.restoreButton.setObjectName("restoreButton")
        self.horizontalLayout_3.addWidget(self.restoreButton)
        self.minimizeButton = QPushButton(self.top_right_btns)
        self.minimizeButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.minimizeButton.setText("")
        icon7 = QIcon()
        icon7.addPixmap(QPixmap(":/icons/icons/cil-minus.png"), QIcon.Normal, QIcon.Off)
        self.minimizeButton.setIcon(icon7)
        self.minimizeButton.setIconSize(QSize(24, 24))
        self.minimizeButton.setObjectName("minimizeButton")
        self.horizontalLayout_3.addWidget(self.minimizeButton)
        self.closeButton = QPushButton(self.top_right_btns)
        self.closeButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.closeButton.setText("")
        icon8 = QIcon()
        icon8.addPixmap(QPixmap(":/icons/icons/cil-x.png"), QIcon.Normal, QIcon.Off)
        self.closeButton.setIcon(icon8)
        self.closeButton.setIconSize(QSize(24, 24))
        self.closeButton.setObjectName("closeButton")
        self.horizontalLayout_3.addWidget(self.closeButton)
        self.horizontalLayout_2.addWidget(self.top_right_btns)
        self.verticalLayout.addWidget(self.main_header)
        self.main_body = QFrame(self.centralwidget)
        self.main_body.setFrameShape(QFrame.StyledPanel)
        self.main_body.setFrameShadow(QFrame.Raised)
        self.main_body.setObjectName("main_body")
        self.horizontalLayout = QHBoxLayout(self.main_body)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.left_side_menu = QFrame(self.main_body)
        self.left_side_menu.setMinimumSize(QSize(0, 40))
        self.left_side_menu.setMaximumSize(QSize(50, 16777215))
        self.left_side_menu.setStyleSheet("QFrame{\n"
                                          "background-color:#000;\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton{\n"
                                          "padding:20px 10px;\n"
                                          "border:none;\n"
                                          "border-radius:10px;\n"
                                          "background-color:#000;\n"
                                          "color:#fff;\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton:hover{\n"
                                          "    background-color: rgb(0, 92, 157);\n"
                                          "}")
        self.left_side_menu.setFrameShape(QFrame.NoFrame)
        self.left_side_menu.setFrameShadow(QFrame.Raised)
        self.left_side_menu.setObjectName("left_side_menu")
        self.verticalLayout_3 = QVBoxLayout(self.left_side_menu)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.camera_button = QPushButton(self.left_side_menu)
        self.camera_button.setMinimumSize(QSize(100, 62))
        self.camera_button.setCursor(QCursor(Qt.PointingHandCursor))
        self.camera_button.setStyleSheet("background-image: url(:/icons/icons/cil-video.png);\n"
                                         "background-repeat:none;\n"
                                         "padding-left:50px;\n"
                                         "background-position:center left;")
        self.camera_button.setObjectName("camera_button")
        self.verticalLayout_3.addWidget(self.camera_button)
        self.stage_button = QPushButton(self.left_side_menu)
        self.stage_button.setMinimumSize(QSize(100, 66))
        self.stage_button.setCursor(QCursor(Qt.PointingHandCursor))
        self.stage_button.setStyleSheet("background-image: url(:/icons/icons/cil-gamepad.png);\n"
                                        "background-repeat:none;\n"
                                        "padding-left:50px;\n"
                                        "background-position:center left;")
        self.stage_button.setIconSize(QSize(16, 16))
        self.stage_button.setObjectName("stage_button")
        self.verticalLayout_3.addWidget(self.stage_button)
        self.laser_button = QPushButton(self.left_side_menu)
        self.laser_button.setMinimumSize(QSize(100, 0))
        self.laser_button.setCursor(QCursor(Qt.PointingHandCursor))
        self.laser_button.setStyleSheet("background-image: url(:/icons/icons/cil-speedometer.png);\n"
                                        "background-repeat:none;\n"
                                        "padding-left:50px;\n"
                                        "background-position:center left;")
        self.laser_button.setIconSize(QSize(16, 16))
        self.laser_button.setObjectName("laser_button")
        self.verticalLayout_3.addWidget(self.laser_button)
        self.horizontalLayout.addWidget(self.left_side_menu)
        self.center_main_items = QFrame(self.main_body)
        self.center_main_items.setMaximumSize(QSize(300, 16777215))
        self.center_main_items.setStyleSheet("")
        self.center_main_items.setFrameShape(QFrame.StyledPanel)
        self.center_main_items.setFrameShadow(QFrame.Raised)
        self.center_main_items.setObjectName("center_main_items")
        self.horizontalLayout_7 = QHBoxLayout(self.center_main_items)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.stackedWidget = QStackedWidget(self.center_main_items)
        font = QFont()
        font.setFamily("Optima")
        font.setItalic(True)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setStyleSheet("background-color:(255,255,255);")
        self.stackedWidget.setObjectName("stackedWidget")
        self.camera_page = QWidget()
        self.camera_page.setObjectName("camera_page")
        self.verticalLayout_5 = QVBoxLayout(self.camera_page)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_3 = QFrame(self.camera_page)
        self.frame_3.setStyleSheet("background-color: rgb(196, 196, 200);")
        self.frame_3.setFrameShape(QFrame.NoFrame)
        self.frame_3.setFrameShadow(QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_11 = QVBoxLayout(self.frame_3)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.frame_9 = QFrame(self.frame_3)
        self.frame_9.setMaximumSize(QSize(16777215, 75))
        self.frame_9.setFrameShape(QFrame.NoFrame)
        self.frame_9.setFrameShadow(QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_6 = QHBoxLayout(self.frame_9)
        self.horizontalLayout_6.setContentsMargins(2, -1, -1, -1)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_3 = QLabel(self.frame_9)
        self.label_3.setMaximumSize(QSize(100, 16777215))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_6.addWidget(self.label_3)
        self.CameraList = QComboBox(self.frame_9)
        self.CameraList.setMaximumSize(QSize(300, 16777215))
        self.CameraList.setObjectName("CameraList")
        self.horizontalLayout_6.addWidget(self.CameraList)
        self.verticalLayout_11.addWidget(self.frame_9)
        self.frame_6 = QFrame(self.frame_3)
        self.frame_6.setMaximumSize(QSize(16777215, 75))
        self.frame_6.setFrameShape(QFrame.NoFrame)
        self.frame_6.setFrameShadow(QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_14 = QHBoxLayout(self.frame_6)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label = QLabel(self.frame_6)
        self.label.setMaximumSize(QSize(90, 16777215))
        self.label.setObjectName("label")
        self.horizontalLayout_14.addWidget(self.label)
        self.frequencyList = QComboBox(self.frame_6)
        self.frequencyList.addItem("30")
        self.frequencyList.addItem("40")
        self.frequencyList.addItem("50")
        self.frequencyList.setMaximumSize(QSize(400, 16777215))
        self.frequencyList.setObjectName("frequencyList")
        self.horizontalLayout_14.addWidget(self.frequencyList)
        self.verticalLayout_11.addWidget(self.frame_6)
        self.frame_8 = QFrame(self.frame_3)
        self.frame_8.setMaximumSize(QSize(16777215, 75))
        self.frame_8.setFrameShape(QFrame.NoFrame)
        self.frame_8.setFrameShadow(QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_16 = QHBoxLayout(self.frame_8)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_2 = QLabel(self.frame_8)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_16.addWidget(self.label_2)
        self.phaseList = QComboBox(self.frame_8)
        self.phaseList.addItem("Two")
        self.phaseList.addItem("Four")
        self.phaseList.addItem("Eight")
        self.phaseList.addItem("Sixteen")
        self.phaseList.setObjectName("phaseList")
        self.horizontalLayout_16.addWidget(self.phaseList)
        self.verticalLayout_11.addWidget(self.frame_8)
        self.frame_10 = QFrame(self.frame_3)
        self.frame_10.setMaximumSize(QSize(16777215, 75))
        self.frame_10.setFrameShape(QFrame.NoFrame)
        self.frame_10.setFrameShadow(QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_17 = QHBoxLayout(self.frame_10)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.label_4 = QLabel(self.frame_10)
        self.label_4.setMaximumSize(QSize(100, 16777215))
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_17.addWidget(self.label_4)
        self.filtersPositions = QComboBox(self.frame_10)
        self.filtersPositions.setObjectName("filtersPositions")
        self.horizontalLayout_17.addWidget(self.filtersPositions)
        self.verticalLayout_11.addWidget(self.frame_10)
        self.frame_4 = QFrame(self.frame_3)
        self.frame_4.setMaximumSize(QSize(16777215, 50))
        self.frame_4.setFrameShape(QFrame.NoFrame)
        self.frame_4.setFrameShadow(QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_12 = QHBoxLayout(self.frame_4)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.delayLabel = QLabel(self.frame_4)
        self.delayLabel.setObjectName("delayLabel")
        self.horizontalLayout_12.addWidget(self.delayLabel)
        self.delayValue = QDoubleSpinBox(self.frame_4)
        self.delayValue.setMaximumSize(QSize(300, 16777215))
        self.delayValue.setObjectName("delayValue")
        self.horizontalLayout_12.addWidget(self.delayValue)
        self.verticalLayout_11.addWidget(self.frame_4)
        self.frame_5 = QFrame(self.frame_3)
        self.frame_5.setMaximumSize(QSize(16777215, 50))
        self.frame_5.setFrameShape(QFrame.NoFrame)
        self.frame_5.setFrameShadow(QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_13 = QHBoxLayout(self.frame_5)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.exposureLabel = QLabel(self.frame_5)
        self.exposureLabel.setObjectName("exposureLabel")
        self.horizontalLayout_13.addWidget(self.exposureLabel)
        self.exposureValue = QDoubleSpinBox(self.frame_5)
        self.exposureValue.setRange(0, 10000)
        self.delayValue.setRange(0, 1000)
        self.exposureValue.setMaximumSize(QSize(300, 16777215))
        self.exposureValue.setObjectName("exposureValue")
        self.horizontalLayout_13.addWidget(self.exposureValue)
        self.verticalLayout_11.addWidget(self.frame_5)
        self.SetConfigurationButton = QPushButton(self.frame_3)
        self.SetConfigurationButton.setObjectName("SetConfigurationButton")
        self.verticalLayout_11.addWidget(self.SetConfigurationButton)
        self.verticalLayout_5.addWidget(self.frame_3)
        self.stackedWidget.addWidget(self.camera_page)
        self.stages_page = QWidget()
        self.stages_page.setObjectName("stages_page")
        self.verticalLayout_6 = QVBoxLayout(self.stages_page)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame = QFrame(self.stages_page)
        self.frame.setStyleSheet("background-color: rgb(196, 196, 200);")
        self.frame.setFrameShape(QFrame.StyledPanel)
        self.frame.setFrameShadow(QFrame.Raised)
        self.frame.setLineWidth(0)
        self.frame.setObjectName("frame")
        self.verticalLayout_10 = QVBoxLayout(self.frame)
        self.verticalLayout_10.setContentsMargins(0, 6, 0, 0)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.comboBox_2 = QComboBox(self.frame)
        self.comboBox_2.setMinimumSize(QSize(0, 20))
        self.comboBox_2.setObjectName("comboBox_2")
        self.verticalLayout_10.addWidget(self.comboBox_2)
        self.comboBox_2.addItem("Please select a Controller")
        self.comboBox_2.addItem("X Controller")
        self.comboBox_2.addItem("Y Controller")
        self.comboBox_2.addItem("Z Controller")
        self.comboBox_2.addItem("Focus Controller")

        self.frame_2 = QFrame(self.frame)
        self.frame_2.setMaximumSize(QSize(16777215, 40))
        self.frame_2.setFrameShape(QFrame.NoFrame)
        self.frame_2.setFrameShadow(QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_11 = QHBoxLayout(self.frame_2)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.relativBewegung = QLineEdit(self.frame_2)
        self.relativBewegung.setMaximumSize(QSize(300, 50))
        self.relativBewegung.setObjectName("relativBewegung")
        self.horizontalLayout_11.addWidget(self.relativBewegung)
        self.relativDown = QPushButton(self.frame_2)
        self.relativDown.setMaximumSize(QSize(40, 16777215))
        self.relativDown.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.relativDown.setText("")
        self.relativDown.setIcon(icon7)
        self.relativDown.setObjectName("relativDown")
        self.horizontalLayout_11.addWidget(self.relativDown)
        self.relativUp = QPushButton(self.frame_2)
        self.relativUp.setMaximumSize(QSize(40, 16777215))
        self.relativUp.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.relativUp.setText("")
        icon9 = QIcon()
        icon9.addPixmap(QPixmap(":/icons/icons/cil-plus.png"), QIcon.Normal, QIcon.Off)
        self.relativUp.setIcon(icon9)
        self.relativUp.setObjectName("relativUp")
        self.horizontalLayout_11.addWidget(self.relativUp)
        self.verticalLayout_10.addWidget(self.frame_2)
        self.doubleSpinBox = MySpinnbox(self.frame)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.verticalLayout_10.addWidget(self.doubleSpinBox)
        self.dial = qDialCustom(self.frame)
        self.dial.setStyleSheet("color: rgb(170, 0, 0);")
        self.dial.setObjectName("dial")
        self.dial.setWrapping(True)
        self.dial.setNotchesVisible(True)

        self.verticalLayout_10.addWidget(self.dial)
        self.FocusUp_Frame_2 = QFrame(self.frame)
        self.FocusUp_Frame_2.setMaximumSize(QSize(16777215, 37))
        self.FocusUp_Frame_2.setFrameShape(QFrame.NoFrame)
        self.FocusUp_Frame_2.setFrameShadow(QFrame.Raised)
        self.FocusUp_Frame_2.setLineWidth(0)
        self.FocusUp_Frame_2.setObjectName("FocusUp_Frame_2")
        self.horizontalLayout_15 = QHBoxLayout(self.FocusUp_Frame_2)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.autoFocus = QPushButton(self.FocusUp_Frame_2)
        self.autoFocus.setMaximumSize(QSize(119, 20))
        self.autoFocus.setObjectName("focusUpButton_2")
        self.horizontalLayout_15.addWidget(self.autoFocus)
        self.autoFocusLabel = QLabel(self.FocusUp_Frame_2)
        self.autoFocusLabel.setObjectName("focusUp_label_2")
        self.horizontalLayout_15.addWidget(self.autoFocusLabel)
        self.verticalLayout_10.addWidget(self.FocusUp_Frame_2)
        self.FocusUp_Frame = QFrame(self.frame)
        self.FocusUp_Frame.setMaximumSize(QSize(16777215, 37))
        self.FocusUp_Frame.setFrameShape(QFrame.NoFrame)
        self.FocusUp_Frame.setFrameShadow(QFrame.Raised)
        self.FocusUp_Frame.setLineWidth(0)
        self.FocusUp_Frame.setObjectName("FocusUp_Frame")
        self.horizontalLayout_10 = QHBoxLayout(self.FocusUp_Frame)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.focusUpButton = QPushButton(self.FocusUp_Frame)
        self.focusUpButton.setMaximumSize(QSize(119, 20))
        self.focusUpButton.setObjectName("focusUpButton")
        self.focusUpButton.setCursor(QCursor(Qt.PointingHandCursor))

        self.horizontalLayout_10.addWidget(self.focusUpButton)
        self.focusUp_label = QLabel(self.FocusUp_Frame)
        self.focusUp_label.setObjectName("focusUp_label")
        self.horizontalLayout_10.addWidget(self.focusUp_label)
        self.verticalLayout_10.addWidget(self.FocusUp_Frame)
        self.FocusDown_Frame = QFrame(self.frame)
        self.FocusDown_Frame.setMaximumSize(QSize(16777215, 37))
        self.FocusDown_Frame.setFrameShape(QFrame.NoFrame)
        self.FocusDown_Frame.setFrameShadow(QFrame.Raised)
        self.FocusDown_Frame.setObjectName("FocusDown_Frame")

        self.horizontalLayout_9 = QHBoxLayout(self.FocusDown_Frame)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.focusDownButton = QPushButton(self.FocusDown_Frame)
        self.focusDownButton.setMaximumSize(QSize(119, 20))
        self.focusDownButton.setObjectName("focusDownButton")
        self.focusDownButton.setCursor(QCursor(Qt.PointingHandCursor))

        self.horizontalLayout_9.addWidget(self.focusDownButton)
        self.focusDown_label = QLabel(self.FocusDown_Frame)
        self.focusDown_label.setObjectName("focusDown_label")
        self.horizontalLayout_9.addWidget(self.focusDown_label)
        self.verticalLayout_10.addWidget(self.FocusDown_Frame)
        self.lcdNumber = QLCDNumber(self.frame)
        self.lcdNumber.setMaximumSize(QSize(16777215, 287))
        lcdNumber = self.lcdNumber
        font = QFont()
        font.setPointSize(20)
        self.lcdNumber.setFont(font)
        self.lcdNumber.setLayoutDirection(Qt.LeftToRight)
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lcdNumber.setFrameShape(QFrame.NoFrame)
        self.lcdNumber.setFrameShadow(QFrame.Raised)
        self.lcdNumber.setDigitCount(5)
        self.lcdNumber.setProperty("value", 0.0)
        self.lcdNumber.setObjectName("lcdNumber")
        self.verticalLayout_10.addWidget(self.lcdNumber)
        self.verticalLayout_6.addWidget(self.frame)
        self.stackedWidget.addWidget(self.stages_page)
        self.laser_page = QWidget()
        self.laser_page.setStyleSheet("")
        self.laser_page.setObjectName("laser_page")
        self.verticalLayout_2 = QVBoxLayout(self.laser_page)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.laserFrame = QFrame(self.laser_page)
        self.laserFrame.setStyleSheet("background-color: rgb(196, 196, 200);\n"
                                      "border-color: none;")
        self.laserFrame.setFrameShape(QFrame.NoFrame)
        self.laserFrame.setFrameShadow(QFrame.Raised)
        self.laserFrame.setObjectName("laserFrame")
        self.verticalLayout_9 = QVBoxLayout(self.laserFrame)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setSpacing(63)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.frame_7 = QFrame(self.laserFrame)
        self.frame_7.setMaximumSize(QSize(16777215, 35))
        self.frame_7.setFrameShape(QFrame.NoFrame)
        self.frame_7.setFrameShadow(QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_8 = QHBoxLayout(self.frame_7)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.laserNavigationBack = QPushButton(self.frame_7)
        self.laserNavigationBack.setCursor(QCursor(Qt.PointingHandCursor))
        self.laserNavigationBack.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.laserNavigationBack.setText("")
        icon10 = QIcon()
        icon10.addPixmap(QPixmap(":/icons/icons/cil-media-step-backward.png"), QIcon.Normal,
                         QIcon.Off)
        self.laserNavigationBack.setIcon(icon10)
        self.laserNavigationBack.setIconSize(QSize(24, 24))
        self.laserNavigationBack.setObjectName("laserNavigationBack")
        self.horizontalLayout_8.addWidget(self.laserNavigationBack)
        self.laserLabel = QLabel(self.frame_7)
        font = QFont()
        font.setPointSize(21)
        self.laserLabel.setFont(font)
        self.laserLabel.setAlignment(Qt.AlignCenter)
        self.laserLabel.setObjectName("laserLabel")
        self.horizontalLayout_8.addWidget(self.laserLabel)
        self.laserNavigationForward = QPushButton(self.frame_7)
        self.laserNavigationForward.setCursor(QCursor(Qt.PointingHandCursor))
        self.laserNavigationForward.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.laserNavigationForward.setText("")
        icon11 = QIcon()
        icon11.addPixmap(QPixmap(":/icons/icons/cil-media-step-forward.png"), QIcon.Normal, QIcon.Off)
        self.laserNavigationForward.setIcon(icon11)
        self.laserNavigationForward.setIconSize(QSize(28, 24))
        self.laserNavigationForward.setObjectName("laserNavigationForward")
        self.horizontalLayout_8.addWidget(self.laserNavigationForward)
        self.verticalLayout_9.addWidget(self.frame_7)
        self.circularProgressBar_Main = QFrame(self.laserFrame)
        self.circularProgressBar_Main.setMaximumSize(QSize(327, 248))
        self.circularProgressBar_Main.setStyleSheet("background-color: none;")
        self.circularProgressBar_Main.setFrameShape(QFrame.NoFrame)
        self.circularProgressBar_Main.setFrameShadow(QFrame.Raised)
        self.circularProgressBar_Main.setObjectName("circularProgressBar_Main")
        self.circularProgressCPU = QFrame(self.circularProgressBar_Main)
        self.circularProgressCPU.setGeometry(QRect(10, 10, 221, 221))
        self.circularProgressCPU.setStyleSheet("QFrame{\n"
                                               "    border-radius: 110px;    \n"
                                               "    background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:0.400 rgba(85, 170, 255, 255), stop:0.395 rgba(255, 255, 255, 0));\n"
                                               "}")
        self.circularProgressCPU.setFrameShape(QFrame.StyledPanel)
        self.circularProgressCPU.setFrameShadow(QFrame.Raised)
        self.circularProgressCPU.setObjectName("circularProgressCPU")
        self.circularBg = QFrame(self.circularProgressBar_Main)
        self.circularBg.setGeometry(QRect(10, 10, 220, 220))
        self.circularBg.setStyleSheet("QFrame{\n"
                                      "    border-radius: 110px;    \n"
                                      "    background-color: rgba(85, 85, 127, 100);\n"
                                      "}")
        self.circularBg.setFrameShape(QFrame.StyledPanel)
        self.circularBg.setFrameShadow(QFrame.Raised)
        self.circularBg.setObjectName("circularBg")
        self.circularContainer = QFrame(self.circularProgressBar_Main)
        self.circularContainer.setGeometry(QRect(25, 25, 190, 190))
        self.circularContainer.setBaseSize(QSize(0, 0))
        self.circularContainer.setStyleSheet("QFrame{\n"
                                             "    border-radius: 95px;    \n"
                                             "    background-color: rgb(58, 58, 102);\n"
                                             "}")
        self.circularContainer.setFrameShape(QFrame.StyledPanel)
        self.circularContainer.setFrameShadow(QFrame.Raised)
        self.circularContainer.setObjectName("circularContainer")
        self.layoutWidget = QWidget(self.circularContainer)
        self.layoutWidget.setGeometry(QRect(10, 40, 171, 142))
        self.layoutWidget.setObjectName("layoutWidget")
        self.infoLayout = QGridLayout(self.layoutWidget)
        self.infoLayout.setContentsMargins(0, 0, 0, 0)
        self.infoLayout.setObjectName("infoLayout")
        self.wavelengthInfo = QLabel(self.layoutWidget)
        font = QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        self.wavelengthInfo.setFont(font)
        self.wavelengthInfo.setStyleSheet("color: #FFFFFF; background-color: none;")
        self.wavelengthInfo.setAlignment(Qt.AlignCenter)
        self.wavelengthInfo.setObjectName("wavelengthInfo")
        self.infoLayout.addWidget(self.wavelengthInfo, 0, 0, 1, 1)
        self.laser1_temp = QLabel(self.layoutWidget)
        font = QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(8)
        self.laser1_temp.setFont(font)
        self.laser1_temp.setStyleSheet("color: rgb(148, 148, 216); background-color: none;")
        self.laser1_temp.setAlignment(Qt.AlignCenter)
        self.laser1_temp.setObjectName("laser1_temp")
        self.infoLayout.addWidget(self.laser1_temp, 3, 0, 1, 1)
        self.laser1_percentage = QLabel(self.layoutWidget)
        font = QFont()
        font.setFamily("Roboto Thin")
        font.setPointSize(30)
        self.laser1_percentage.setFont(font)
        self.laser1_percentage.setStyleSheet("color: rgb(115, 185, 255); padding: 0px; background-color: none;")
        self.laser1_percentage.setAlignment(Qt.AlignCenter)
        self.laser1_percentage.setIndent(-1)
        self.laser1_percentage.setObjectName("laser1_percentage")
        self.infoLayout.addWidget(self.laser1_percentage, 2, 0, 1, 1)
        self.circularBg.raise_()
        self.circularProgressCPU.raise_()
        self.circularContainer.raise_()
        self.verticalLayout_9.addWidget(self.circularProgressBar_Main)
        self.laserPowerButton = MySwitch(self.laserFrame)
        self.laserPowerButton.setText("")
        self.laserPowerButton.setObjectName("laserPowerButton")
        self.verticalLayout_9.addWidget(self.laserPowerButton)
        self.laserSlider = QSlider(self.laserFrame)
        self.laserSlider.setStyleSheet("/* SLIDERS */\n"
                                       "QSlider::groove:horizontal {\n"
                                       "    border-radius: 9px;\n"
                                       "    height: 18px;\n"
                                       "    margin: 0px;\n"
                                       "    background-color: rgb(52, 59, 72);\n"
                                       "}\n"
                                       "QSlider::groove:horizontal:hover {\n"
                                       "    background-color: rgb(55, 62, 76);\n"
                                       "}\n"
                                       "QSlider::handle:horizontal {\n"
                                       "    background-color: rgb(85, 170, 255);\n"
                                       "    border: none;\n"
                                       "    height: 18px;\n"
                                       "    width: 18px;\n"
                                       "    margin: 0px;\n"
                                       "    border-radius: 9px;\n"
                                       "}\n"
                                       "QSlider::handle:horizontal:hover {\n"
                                       "    background-color: rgb(105, 180, 255);\n"
                                       "}\n"
                                       "QSlider::handle:horizontal:pressed {\n"
                                       "    background-color: rgb(65, 130, 195);\n"
                                       "}")
        self.laserSlider.setMaximum(100)
        self.laserSlider.setOrientation(Qt.Horizontal)
        self.laserSlider.setObjectName("laserSlider")
        self.verticalLayout_9.addWidget(self.laserSlider)
        self.comboBox_7 = QComboBox(self.laserFrame)
        self.comboBox_7.setObjectName("comboBox_7")
        self.verticalLayout_9.addWidget(self.comboBox_7)
        self.comboBox_6 = QComboBox(self.laserFrame)
        self.comboBox_6.setObjectName("comboBox_6")
        self.verticalLayout_9.addWidget(self.comboBox_6)
        self.verticalLayout_2.addWidget(self.laserFrame)
        self.stackedWidget.addWidget(self.laser_page)
        self.horizontalLayout_7.addWidget(self.stackedWidget)
        self.horizontalLayout.addWidget(self.center_main_items)
        self.right_side_menu = QFrame(self.main_body)
        self.right_side_menu.setMaximumSize(QSize(16777215, 16777215))
        self.right_side_menu.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.right_side_menu.setFrameShape(QFrame.NoFrame)
        self.right_side_menu.setFrameShadow(QFrame.Raised)
        self.right_side_menu.setObjectName("right_side_menu")
        self.verticalLayout_4 = QVBoxLayout(self.right_side_menu)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.liveViewFrame = QFrame(self.right_side_menu)
        self.liveViewFrame.setStyleSheet("")
        self.liveViewFrame.setFrameShape(QFrame.StyledPanel)
        self.liveViewFrame.setFrameShadow(QFrame.Raised)
        self.liveViewFrame.setObjectName("liveViewFrame")
        self.verticalLayout_8 = QVBoxLayout(self.liveViewFrame)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.imageLive = MyCustomQLabel(self.liveViewFrame)
        self.imageLive.setObjectName("imageLive")

        self.verticalLayout_8.addWidget(self.imageLive, alignment=Qt.AlignCenter)
        self.verticalLayout_4.addWidget(self.liveViewFrame)
        self.histogramFrame = QFrame(self.right_side_menu)
        self.histogramFrame.setMaximumSize(QSize(16777215, 150))
        self.histogramFrame.setStyleSheet("")
        self.histogramFrame.setFrameShape(QFrame.StyledPanel)
        self.histogramFrame.setFrameShadow(QFrame.Raised)
        self.histogramFrame.setObjectName("histogramFrame")
        self.verticalLayout_7 = QVBoxLayout(self.histogramFrame)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.graphicsView_2 = PlotWidget(self.histogramFrame)
        self.graphicsView_2.setObjectName("graphicsView_2")
        histogrammView = self.graphicsView_2
        self.verticalLayout_7.addWidget(self.graphicsView_2)
        self.verticalLayout_4.addWidget(self.histogramFrame)
        self.horizontalLayout.addWidget(self.right_side_menu)
        self.verticalLayout.addWidget(self.main_body)
        self.main_footer = QFrame(self.centralwidget)
        self.main_footer.setMaximumSize(QSize(16777215, 30))
        self.main_footer.setStyleSheet("QFrame{\n"
                                       "border-bottom: 1px solid #000;\n"
                                       "background-color: rgb(0, 0, 0);\n"
                                       "}")
        self.main_footer.setFrameShape(QFrame.WinPanel)
        self.main_footer.setFrameShadow(QFrame.Raised)
        self.main_footer.setObjectName("main_footer")
        self.verticalLayout.addWidget(self.main_footer)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

        # Button click events to our top bar buttons
        # Minimze windows
        self.minimizeButton.clicked.connect(lambda: MainWindow.showMinimized())

        # Restore/Maximize window
        self.restoreButton.clicked.connect(lambda: self.restore_or_maximize_window())

        # close window
        self.closeButton.clicked.connect(lambda: MainWindow.close())

        # laser1 power Button
        self.laserPowerButton.clicked.connect(lambda: self.powerValue_initialisation())


        self.playButton.clicked.connect(lambda: self.StartLiveView(0))

        self.focusUpButton.clicked.connect(lambda: self.GetAllStagesPosition(1))

        self.focusDownButton.clicked.connect(lambda: self.GetAllStagesPosition(2))

        # SLIDABLE LEFT MENU/////////////////
        # Left Menu toggle button
        self.left_menu_toggle_btn.clicked.connect(lambda: self.slideLeftMenu())
        # ###############################################
        # //////////////////////////////////////

        self.stackedWidget.setCurrentWidget(self.camera_page)
        # navigate to camera page
        self.camera_button.clicked.connect(lambda: self.navigateToCameraPage())

        # navigate to Controller page
        self.stage_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.stages_page))

        # navigate to Laser page
        self.laser_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.laser_page))

        ## ==> APPLY VALUES TO PROGREESBAR
        self.laserSlider.valueChanged.connect(lambda: self.ChangeLaserValue())

        self.relativUp.clicked.connect(lambda: self.MoveRelativ(1))

        self.relativDown.clicked.connect(lambda: self.MoveRelativ(0))

        self.browse_files.clicked.connect(lambda: self.showDialog())

        self.startRecorder.clicked.connect(lambda: self.StartSequenceAcquisition())

        self.ImageCapture.clicked.connect(lambda: self.SingleImageAcquisition())
        self.dial.valueChanged.connect(self.updateControllerValue)

        self.comboBox_2.currentTextChanged.connect(self.checkComboBoxValue)

        self.filtersPositions.currentTextChanged.connect(self.MoveFilterToPosition)

        self.liveModeList.currentTextChanged.connect(self.SetLiveMode)

        self.CameraList.currentTextChanged.connect(self.ChangeCameraAndSetParameter)

        self.doubleSpinBox.keyPressed.connect(self.on_key)

        self.imageLive.mousepressed.connect(self.ZoomAction)

        self.SetConfigurationButton.clicked.connect(lambda: self.SetCameraParameter())

        #self.rotationButton.clicked.connect(lambda: self.Rotation())

        self.rotationButton.clicked.connect(lambda: self.RestartHardware())

        self.autoFocus.clicked.connect(lambda: self.SetAutoFocus())

        self.laserNavigationBack.clicked.connect(lambda: self.navigateToAnotherlaser(-1))
        self.laserNavigationForward.clicked.connect(lambda: self.navigateToAnotherlaser(1))

        self.comboBox_6.currentTextChanged.connect(self.changeLaserModulation)

        self.CameraList.currentTextChanged.connect(self.changeCamera)



        ## ==> DEF START VALUES
        self.laserSlider.setValue(0)

        self.setValueToProgressbar(0)


        self.laserSlider.setEnabled(False)
        imageFrame = self.imageLive

        self.listOfPositionsFocuDown = None
        self.listOfPositionsFocusUp = None
        startRecorder = self.startRecorder




        self.stackedWidget.setCurrentIndex(2)

    def SetLiveMode(self):
        global currentLiveMode, LiveMode

        liveModusMethod = self.liveModeList.currentText()
        print(liveModusMethod)
        currentLiveMode = LiveMode[liveModusMethod]

    def RestartHardware(self):
        global laser1ON,laser2ON,laser3ON, liveModus

        if laser1ON:
            Controller.LaserOff(LASER['blue'])
        if laser2ON:
            Controller.LaserOff(LASER['red'])
        if laser3ON:
            Controller.LaserOff(LASER['purple'])
        if liveModus:
            liveModus = False

        Controller.Disconnect()
        connect_hardware()
        self.navigateToCameraPage()

    def ChangeCameraAndSetParameter(self):
        Dialog = QDialog()
        ui = FlimParameter_Dialog()
        ui.setupUi(Dialog)
        Dialog.show()

    def SetCameraParameter(self):
        global exposureParameter, cameraType,phaseNumber,liveModus

        liveModus = True
        self.StartLiveView(0)
        Controller.SetExposure(cameraType, int(self.exposureValue.value()), int(self.delayValue.value()))

        if(cameraType == 2):

            frequency = None
            if(self.phaseList.currentText() != ""):
                phaseNumber = PhaseNumber[self.phaseList.currentText()]

            if (self.frequencyList.currentText() != ""):
                frequency = int(self.frequencyList.currentText())*1000000

            Controller.SetFlimParamter(cameraType, phaseNumber, frequency)

        response = Controller.GetExposureTime(cameraType)

        print(response)
        exposureParameter["ExposureTime"] = response[0]
        exposureParameter["DelayTime"] = response[1]

        #liveModus = True


    def changeCamera(self):
        global listOfCameras, cameraType

        if(  listOfCameras != None and  len(listOfCameras) > 0 and self.CameraList != None):
            if(self.CameraList.currentText() == "LSFM_Camera"):
                 cameraType = 1
            elif(self.CameraList.currentText() == "LSFM_FLIM_Camera"):
                 cameraType = 2

        if (cameraType == 1):
            self.frequencyList.setDisabled(True)
            self.phaseList.setDisabled(True)

        else:
            self.frequencyList.setDisabled(False)
            self.phaseList.setDisabled(False)




    def navigateToCameraPage(self):
        global listofPositions, filterParameter,cameraType,listOfCameras
        self.firstiniatilsation = 0
        exposureParameter = Controller.GetExposureTime(cameraType)
        self.listOfFilters = listofPositions
        actFilterPosition = Controller.GetActualFilterPosition()
        self.filtersPositions.clear()
        self.CameraList.clear()
        self.phaseList.setCurrentText("Four")
        for key in self.listOfFilters:
            self.filtersPositions.addItem(self.listOfFilters[key])

        for element in listOfCameras:
            self.CameraList.addItem(element)

        if(cameraType == 1):
            self.frequencyList.setDisabled(True)
            self.phaseList.setDisabled(True)

        else:
            self.frequencyList.setDisabled(False)
            self.phaseList.setDisabled(False)


        self.filtersPositions.setCurrentText(self.listOfFilters[actFilterPosition])
        filterParameter = self.filtersPositions.currentText()
        print(filterParameter)
        self.exposureValue.setValue(exposureParameter[0])
        self.delayValue.setValue(exposureParameter[1])
        self.stackedWidget.setCurrentWidget(self.camera_page)
        self.firstiniatilsation = 1

    def MoveFilterToPosition(self):
        global filterParameter
        if self.firstiniatilsation != 0:
            key_list = list(self.listOfFilters.keys())
            val_list = list(self.listOfFilters.values())
            keyposition = val_list.index(self.filtersPositions.currentText())
            position = key_list[keyposition]
            newposition = Controller.MoveFilterToPosition(position)
            filterParameter = self.filtersPositions.currentText()
            print(filterParameter)

    def ZoomAction(self):
        pass

    def on_key(self):
        global combobox2_text, listControllersView, actPosition, isZstage, spinbox_value, current_action, actionText
        actionText = "Movement to the requested position in process"
        current_action = 1
        spinbox_value = self.doubleSpinBox.value()
        spinbox_value = float(spinbox_value)
        if self.comboBox_2.currentText() == "Please select a Controller":
            QMessageBox.about(w, "Error", "Please Select first a Controller")

        else:
            if self.comboBox_2.currentText() == "Z Controller":
                print(spinbox_value)
                if (spinbox_value > 5.0 or spinbox_value < -5.0):
                    QMessageBox.about(w, "Error", "Value Out of Range")
                    self.doubleSpinBox.setValue(0)
                else:
                    dial = Dialog1(self)
                    dial.show()
                    dial.exec_()



            else:
                if (spinbox_value > 75 or spinbox_value < 0):
                    QMessageBox.about(w, "Error", "Value Out of Range")
                    self.doubleSpinBox.setValue(0)
                else:
                    dial = Dialog1(self)
                    dial.show()
                    dial.exec_()

    def ShowErrorMessage(self, errortype, message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(errortype)
        msg.setInformativeText(message)
        msg.setWindowTitle("Error")
        msg.exec_()

    def GetAllStagesPosition(self, position):
        if position == 1:
            self.listOfPositionsFocusUp = Controller.GetStagesPosition()
            self.focusUp_label.setText("Focus Up stored")
        else:
            self.listOfPositionsFocuDown = Controller.GetStagesPosition()
            self.focusDown_label.setText("Focus Down stored")

    def StartLiveView(self, action):
        global liveModus

        th = Thread(self.liveViewFrame)
        th.changePixmap.connect(self.setImage)

        if (liveModus == False):
            th.start()
            self.liveViewFrame.show()
            icon3 = QIcon()
            icon3.addPixmap(QPixmap(":/icons/icons/cil-media-pause.png"), QIcon.Normal, QIcon.Off)
            self.playButton.setIcon(icon3)
            liveModus = True


        else:
            if (action):
                th.stop()
                th.start()
                self.liveViewFrame.show()
                liveModus = True
            else:
                print("live Modus aus")
                th.stop()
                icon3 = QIcon()
                icon3.addPixmap(QPixmap(":/icons/icons/cil-media-play.png"), QIcon.Normal, QIcon.Off)
                self.playButton.setIcon(icon3)
                liveModus = False

    def SingleImageAcquisition(self):
        global cameraType

        self.saveFileDialog()
        if self.imageAcquisition != None:
            if (cameraType == 2):
                self.imageAcquisition = self.imageAcquisition.split(".")[0]


            Controller.SingleImageAquisition(cameraType, self.imageAcquisition)

    def saveFileDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self, "QFileDialog.getSaveFileName()", "",
                                                  "All Files (*);;Tiff Files (*.tiff)", options=options)
        if fileName:
            self.imageAcquisition = fileName

    def StartSequenceAcquisition(self):

        global xValue, yValue, dz_value, image_count, camera, listOfCameras, focusUp_value, focusDown_value, zUp_value, zDown_value, acquisitionPath, \
            actionText, current_action, laser2ON, laser1ON, fastForward, isAcquisitionRunning
        actionText = "Acquisition is Running"
        current_action = 0
        if self.sequenceAcquisitionPath == None:
            self.ShowErrorMessage("Error", "Please Select a Directory to save the Images")
            return
        else:
            if self.listOfPositionsFocuDown == None or self.listOfPositionsFocusUp == None:
                self.ShowErrorMessage("Error", "Please valid value for the Z positions and Focus")
                return
            else:
                inputIncorrect = True
                Dialog = QDialog(self)
                ui = SequenceAcquisition.Ui_Dialog(listOfCameras, self.listOfPositionsFocusUp,
                                                   self.listOfPositionsFocuDown)
                ui.setupUi(Dialog)

                Dialog.show()
                returnCode = Dialog.exec_()
                if returnCode == Dialog.Accepted:
                    self.xValue = ui.xValue.value()
                    self.yValue = ui.yValue.value()
                    self.dz_value = ui.dz_Value.value()
                    self.image_count = ui.image_value.value()
                    self.focusUp_value = ui.focusUp_value.value()
                    self.focusDown_value = ui.focusDown_value.value()
                    self.zUp_value = ui.ZUP_value.value()
                    self.zDown_value = ui.ZDown_Value.value()
                    self.fastForward = ui.fastForward.isChecked()


                    self.camera = ui.cameraList.currentText()


                    if(self.image_count == 0.0):
                        self.ShowErrorMessage("Error", "One input is incorrect, please control yours entries")
                        xValue = self.xValue
                        yValue = self.yValue
                        dz_value = self.dz_value
                        image_count = self.image_count
                        focusUp_value = self.focusUp_value
                        focusDown_value = self.focusDown_value
                        zUp_value = self.zUp_value
                        zDown_value = self.zDown_value
                        camera = self.camera
                        fastForward = self.fastForward



                    else:
                        acquisitionPath = self.sequenceAcquisitionPath
                        xValue = self.xValue
                        yValue = self.yValue
                        dz_value = (self.dz_value/1000.0)
                        image_count = self.image_count
                        focusUp_value = self.focusUp_value
                        focusDown_value = self.focusDown_value
                        zUp_value = self.zUp_value
                        zDown_value = self.zDown_value
                        camera = self.camera
                        fastForward = self.fastForward



                        self.startRecorder.setStyleSheet("background-color: red")
                        isAcquisitionRunning = True

                        dial = Dialog1()
                        dial.show()
                        dial.exec_()

    def navigateToAnotherlaser(self, count):
        global currentLaser,laser3ON,laser1ON,laser2ON

        self.setValueToProgressbar(0)
        self.laserSlider.setValue(0)
        self.laserSlider.setEnabled(False)
        self.laserPowerButton.setChecked(False)

        currentLaser += count

        if currentLaser > 3:
            currentLaser = 1

        elif currentLaser < 1:
            currentLaser = 3

        if(currentLaser == 1):
            self.laserLabel.setText("Laser 1")
            self.setValue(self.laserSlider, self.laser1_percentage, self.circularProgressCPU,
                          "rgba(85, 170, 255, 255)")
            self.laser1_percentage.setStyleSheet("color: rgb(115, 185, 255); padding: 0px; background-color: none;")
            self.laserSlider.setStyleSheet("/* SLIDERS */\n"
                                           "QSlider::groove:horizontal {\n"
                                           "    border-radius: 9px;\n"
                                           "    height: 18px;\n"
                                           "    margin: 0px;\n"
                                           "    background-color: rgb(52, 59, 72);\n"
                                           "}\n"
                                           "QSlider::groove:horizontal:hover {\n"
                                           "    background-color: rgb(55, 62, 76);\n"
                                           "}\n"
                                           "QSlider::handle:horizontal {\n"
                                           "    background-color: rgb(115, 185, 255);\n"
                                           "    border: none;\n"
                                           "    height: 18px;\n"
                                           "    width: 18px;\n"
                                           "    margin: 0px;\n"
                                           "    border-radius: 9px;\n"
                                           "}\n"
                                           "QSlider::handle:horizontal:hover {\n"
                                           "    background-color: rgb(255, 55, 155);\n"
                                           "}\n"
                                           "QSlider::handle:horizontal:pressed {\n"
                                           "    background-color: rgb(199, 0, 99);\n"
                                           "}\n"
                                           "")

        if(currentLaser == 2):
            self.laserLabel.setText("Laser 2")
            self.setValue(self.laserSlider, self.laser1_percentage, self.circularProgressCPU,
                              "rgba(255, 0, 127, 255)")
            self.laser1_percentage.setStyleSheet("color: rgb(255, 44, 174); padding: 0px; background-color: none;")
            #self.laser1_percentage.setStyleSheet("color: rgb(115, 185, 255); padding: 0px; background-color: none;")
            self.laserSlider.setStyleSheet("/* SLIDERS */\n"
                                             "QSlider::groove:horizontal {\n"
                                             "    border-radius: 9px;\n"
                                             "    height: 18px;\n"
                                             "    margin: 0px;\n"
                                             "    background-color: rgb(52, 59, 72);\n"
                                             "}\n"
                                             "QSlider::groove:horizontal:hover {\n"
                                             "    background-color: rgb(55, 62, 76);\n"
                                             "}\n"
                                             "QSlider::handle:horizontal {\n"
                                             "    background-color: rgb(255, 0, 127);\n"
                                             "    border: none;\n"
                                             "    height: 18px;\n"
                                             "    width: 18px;\n"
                                             "    margin: 0px;\n"
                                             "    border-radius: 9px;\n"
                                             "}\n"
                                             "QSlider::handle:horizontal:hover {\n"
                                             "    background-color: rgb(255, 55, 155);\n"
                                             "}\n"
                                             "QSlider::handle:horizontal:pressed {\n"
                                             "    background-color: rgb(199, 0, 99);\n"
                                             "}\n"
                                             "")

        elif(currentLaser == 3):
            self.laserLabel.setText("Laser 3")
            self.setValue(self.laserSlider, self.laser1_percentage, self.circularProgressCPU,
                          "rgba(85, 0, 127, 255)")
            self.laser1_percentage.setStyleSheet("color: rgb(85, 0, 127); padding: 0px; background-color: none;")
            # self.laser1_percentage.setStyleSheet("color: rgb(115, 185, 255); padding: 0px; background-color: none;")
            self.laserSlider.setStyleSheet("/* SLIDERS */\n"
                                           "QSlider::groove:horizontal {\n"
                                           "    border-radius: 9px;\n"
                                           "    height: 18px;\n"
                                           "    margin: 0px;\n"
                                           "    background-color: rgb(52, 59, 72);\n"
                                           "}\n"
                                           "QSlider::groove:horizontal:hover {\n"
                                           "    background-color: rgb(55, 62, 76);\n"
                                           "}\n"
                                           "QSlider::handle:horizontal {\n"
                                           "    background-color: rgb(85, 0, 127);\n"
                                           "    border: none;\n"
                                           "    height: 18px;\n"
                                           "    width: 18px;\n"
                                           "    margin: 0px;\n"
                                           "    border-radius: 9px;\n"
                                           "}\n"
                                           "QSlider::handle:horizontal:hover {\n"
                                           "    background-color: rgb(255, 55, 155);\n"
                                           "}\n"
                                           "QSlider::handle:horizontal:pressed {\n"
                                           "    background-color: rgb(199, 0, 99);\n"
                                           "}\n"
                                           "")

    def MoveRelativ(self, eingabe):
        global combobox2_text, listControllersView, actPosition, isZstage

        number = self.relativBewegung.text()
        try:
            number = float(number)
            if (eingabe == 0):
                number = number * (-1)
        except Exception:
            QMessageBox.about(self, 'Error', 'Input can only be a number')
            self.relativBewegung.clear()

            return

        if (self.comboBox_2.currentText() == "Z Controller"):
            print(self.comboBox_2.currentText(), number)
            if (number < 5.0 and number > -5.0):
                Controller.MoveRelativ(listControllersView[combobox2_text], number)
                actPosition = Controller.GetStagesPosition()
                positionValue = float(actPosition[combobox2_text])
                print(actPosition)
                self.lcdNumber.display(positionValue)
            else:
                QMessageBox.about(self, 'Error', 'Input Out of Range, please select a value between -5 and 5')
                self.relativBewegung.clear()
        else:
            if (number >= - 75 and number <= 75):
                Controller.MoveRelativ(listControllersView[combobox2_text], number)
                actPosition = Controller.GetStagesPosition()
                positionValue = float(actPosition[combobox2_text])
                print(actPosition)
                self.lcdNumber.display(positionValue)
            else:
                QMessageBox.about(self, 'Error', 'Input Out of Range, please select a value between 0 and 75')
                self.relativBewegung.clear()

    def changeLaserModulation(self):
        global currentLaser
        modulation = self.comboBox_6.currentText()
        if (modulation == ""):
            pass
        else:
          Controller.SetModulation(currentLaser, LaserPulseMOdulation[modulation])

    def ChangeLaserValue(self):
        global ActualLaserParameter,currentLaser

        if (currentLaser == 1):
            laserValue = self.laserSlider.value()
            Controller.SetPower(488, laserValue)
            ActualLaserParameter["LaserTyp"] = 'blue'
            if(laserValue != 0):
                ActualLaserParameter["LaserPower"] = int(laserValue)

            self.setValue(self.laserSlider, self.laser1_percentage, self.circularProgressCPU,
                          "rgba(85, 170, 255, 255)")



        elif(currentLaser == 2):
             laserValue = self.laserSlider.value()
             Controller.SetPower(638, laserValue)
             ActualLaserParameter["LaserTyp"] = 'red'
             if (laserValue != 0):
                 ActualLaserParameter["LaserPower"] = int(laserValue)
             self.setValue(self.laserSlider, self.laser1_percentage, self.circularProgressCPU,
                           "rgba(255, 0, 127, 255)")

        else:
            laserValue = self.laserSlider.value()
            Controller.SetPower(455, laserValue)
            ActualLaserParameter["LaserTyp"] = 'purple'
            if (laserValue != 0):
                ActualLaserParameter["LaserPower"] = int(laserValue)
            self.setValue(self.laserSlider, self.laser1_percentage, self.circularProgressCPU,
                          "rgba(85, 0, 127, 255)")



    def checkComboBoxValue(self):

        global controllerMethodSelected, controllerSelected, combobox2_text, isZstage, oldControllersValues,actPosition
        self.value = self.comboBox_2.currentText()
        try:
            actPosition = Controller.GetStagesPosition()
            print(actPosition)
            if (self.value == "Z Controller"):
                self.dial.setRange(-5000, 5000)
                self.doubleSpinBox.setRange(-5, 5)
                self.doubleSpinBox.setSingleStep(0.001)

                isZstage = True
                controllerSelected = True
                self.dial.setValue(oldControllersValues[self.value])
                combobox2_text = str(self.comboBox_2.currentText())
                displayValue = actPosition[combobox2_text]
                self.lcdNumber.display(round(displayValue, 3))

            elif (self.value == "X Controller" or self.value == "Y Controller" or self.value == "Focus Controller"):
                self.dial.setRange(0, 75000)
                self.doubleSpinBox.setSingleStep(0.001)
                self.doubleSpinBox.setRange(0, 75)
                controllerSelected = True
                self.dial.setValue(oldControllersValues[self.value])
                combobox2_text = str(self.comboBox_2.currentText())

                self.lcdNumber.display(actPosition[combobox2_text])


        except Exception as error:
            print(" error: {0}".format(error))


    def SetAutoFocus(self):
        global liveModus,actPosition

        Dialog = QDialog(self)
        ui = AutoFocus_Dialog()
        ui.setupUi(Dialog)
        Dialog.show()
        returnCode = Dialog.exec_()
        autofocusStep = 0.0
        if returnCode == Dialog.Accepted:
            autofocusStep = ui.doubleSpinBox.value()

        print(autofocusStep)
        self.autoFocusLabel.setText("Auto Focus is Activ")
        if liveModus:
            self.StartLiveView(0)
        f0 = actPosition["Focus Controller"]
        df = autofocusStep

        """
        f1 = f0 - 2.5
        f2 = f0 -5.
        f3 = f0 + 2.5
        f4 = f0 + 5
        focuslist = [f0,f1,f2,f3,f4]
        """
        focusDict = {}
        count = 0
        while (df > 0.02) and (count < 20):
            count += 1
            focuslist = [f0 - 2 * df, f0 - df, f0, f0 + df, f0 + 2 * df]
            print(focuslist)
            for i in focuslist:
                if not i in focusDict.keys():
                    Controller.MoveAbsolut(listControllersView["Focus Controller"],i,1)
                    image =  Controller.Live_View()
                    focusDict[i] = ira(image[::4,::4])

            f1 = focuslist[np.argmax([focusDict[j] for j in focuslist])]
            if f1 == np.min(focuslist):
                f0 = f1-1.5*df
            elif f1 == np.max(focuslist):
                f0 = f1+1.5*df
            else:
                #c2 = np.polyfit(focuslist, [focusDict[j] for j in focuslist], 2)
                #f1 = -1. * c2[1] / (2 * c2[0])
                df /= 2.
                print(df)
                f0 = f1

        print(focusDict)
        Controller.MoveAbsolut(listControllersView["Focus Controller"], f1,1)
        self.autoFocusLabel.setText("Auto Focus found")
        self.StartLiveView(0)


    def Rotation(self):
        global rotationScalar
        rotationScalar = (rotationScalar + 1) % 4

        self.StartLiveView(1)

    def updateControllerValue(self, event):
        global controllerSelected, positionTarget, isZstage, oldControllersValues
        self.value = self.comboBox_2.currentText()

        if (
                self.value == "X Controller" or self.value == "Y Controller" or self.value == "Focus Controller" or self.value == "Z Controller"):
            if (self.value == "Z Controller"):
                self.dial.setRange(-5000, 5000)

            else:
                self.dial.setRange(0, 75000)

            oldControllersValues[self.value] = float(event)
            if (controllerSelected == False):
                QMessageBox.about(w, "Error", "Please select a Controller")
                self.dial.setValue(0)
                self.lcdNumber.display(0)
            else:
                value = float(event)

                value = value * 0.001

                self.doubleSpinBox.setValue(value)
                self.lcdNumber.display(value)
                positionTarget = value

        else:
            self.ShowErrorMessage("Error", "Please select first a Controller")

    def showDialog(self):

        fname = QFileDialog.getExistingDirectory(w, 'Open f', '/home')

        if fname:
            # Returns pathName with the '/' separators converted to separators that are appropriate for the underlying operating system.
            # On Windows, toNativeSeparators("c:/winnt/system32") returns
            # "c:\winnt\system32".
            fname = QDir.toNativeSeparators(fname)

        if os.path.isdir(fname):
            self.sequenceAcquisitionPath = fname

    ## Initialie the LaserPowerValue
    def powerValue_initialisation(self):
        global laser2ON,laser1ON,laser3ON,currentLaser,LaserOperatingMode,LaserPulseMOdulation
        self.comboBox_7.clear()
        self.comboBox_6.clear()


        for item in LaserOperatingMode:
            self.comboBox_7.addItem(item)

        for item in range(len(LaserPulseMOdulation) - 1):
            self.comboBox_6.addItem(list(LaserPulseMOdulation.keys())[item])

        if (currentLaser == 1):
            if (laser1ON == False):
                if Controller.LaserOn(LASER['blue']):
                    try:
                        self.comboBox_6.setCurrentText(Controller.GetModulation(LASER['blue']))
                        ## ==> SET INITIAL PROGRESS BAR TO (0) ZERO
                        power_value = Controller.GetLaserPower(LASER['blue'])
                        self.setValueToProgressbar(power_value)
                        self.laserSlider.setValue(power_value)
                        self.laserSlider.setEnabled(True)

                        laser1ON = True

                    except Exception:
                        self.laserPowerButton.setChecked(False)

            else:
                if Controller.LaserOff(LASER['blue']):
                    self.comboBox_7.clear()
                    self.comboBox_6.clear()
                    self.setValueToProgressbar(0)
                    self.laserSlider.setValue(0)
                    self.laserSlider.setEnabled(False)
                    laser1ON = False


        elif(currentLaser == 2):

            if (laser2ON == False):
                ## ==> SET INITIAL PROGRESS BAR TO (0) ZERO
                if Controller.LaserOn(LASER['red']):
                    try:

                        self.comboBox_6.setCurrentText(Controller.GetModulation(LASER['red']))
                        power_value = Controller.GetLaserPower(LASER['red'])
                        self.setValueToProgressbar(power_value)
                        self.laserSlider.setValue(power_value)
                        self.laserSlider.setEnabled(True)

                        laser2ON = True

                    except Exception:
                        self.laserPowerButton.setChecked(False)

            else:

                if Controller.LaserOff(LASER['red']):
                    self.comboBox_7.clear()
                    self.comboBox_6.clear()
                    self.setValueToProgressbar(0)
                    self.laserSlider.setValue(0)
                    self.laserSlider.setEnabled(False)
                    laser2ON = False

        else:
            self.comboBox_6.addItem("Digital and Analog modulation active")

            if (laser3ON == False):
                ## ==> SET INITIAL PROGRESS BAR TO (0) ZERO
                if Controller.LaserOn(LASER['purple']):
                    try:

                        self.comboBox_6.setCurrentText(Controller.GetModulation(LASER['purple']))
                        power_value = Controller.GetLaserPower(LASER['purple'])
                        self.setValueToProgressbar(power_value)
                        self.laserSlider.setValue(power_value)
                        self.laserSlider.setEnabled(True)

                        laser3ON = True
                        print("Laser 3 ist On")

                    except Exception:
                        self.laserPowerButton.setChecked(False)

            else:

                if Controller.LaserOff(LASER['purple']):
                    self.comboBox_7.clear()
                    self.comboBox_6.clear()
                    self.setValueToProgressbar(0)
                    self.laserSlider.setValue(0)
                    self.laserSlider.setEnabled(False)
                    laser3ON = False





    ## SET VALUES TO DEF progressrValue
    def setValue(self, slider, labelPercentage, progressBarName, color):

        # Get Slider VALUE
        value = slider.value()

        # Convert Value to INT
        slidervalue = int(value)

        # HTML TEXT PERCENTAGE
        htmlText = """<p align="center"><span style=" font-size:50pt;">{VALUE}</span><span style=" font-size:40pt; vertical-align:super;">%</span></p>"""
        labelPercentage.setText(htmlText.replace("{VALUE}", str(slidervalue)))

        # CALL DEF progressBarValue
        self.progressBarValue(slidervalue, progressBarName, color)

    def progressBarValue(self, value, widget, color):

        # PROGRESSBAR STYLESHEET BASE
        styleSheet = """
        QFrame{
        	border-radius: 110px;
        	background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(255, 0, 127, 0), stop:{STOP_2} {COLOR});
        }
        """

        # GET PROGRESS BAR VALUE, CONVERT TO FLOAT AND INVERT VALUES
        # stop works of 1.000 to 0.000
        progress = (100 - value) / 100.0

        # GET NEW VALUES
        stop_1 = str(progress - 0.001)
        stop_2 = str(progress)

        # FIX MAX VALUE
        if value == 100:
            stop_1 = "1.000"
            stop_2 = "1.000"

        # SET VALUES TO NEW STYLESHEET
        newStylesheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2).replace("{COLOR}", color)

        # APPLY STYLESHEET WITH NEW VALUES
        widget.setStyleSheet(newStylesheet)

    def restore_or_maximize_window(self):
        # Global windows state
        global WINDOWS_SIZE  # the default value is 0 to show that the size si not maximized
        win_status = WINDOWS_SIZE

        if win_status == 0:
            # if the windows is not maximized
            WINDOWS_SIZE = 1  # update the value to show that the size has been maximized/set to normal size
            w.showMaximized()
            icon1 = QIcon()
            icon1.addPixmap(QPixmap(":/icons/icons/cil-browser.png"), QIcon.Normal, QIcon.Off)
            self.restoreButton.setIcon(icon1)

        else:
            # if the windows is on its default size
            WINDOWS_SIZE = 0  # update the value to show that the size has been minimized
            w.showNormal()
            icon1 = QIcon()
            icon1.addPixmap(QPixmap(":/icons/icons/cil-window-restore.png"), QIcon.Normal, QIcon.Off)
            self.restoreButton.setIcon(icon1)

        ########################################################################
        # Slide left menu
        ########################################################################

    def setValueToProgressbar(self, value):
        global currentLaser

        # PROGRESSBAR STYLESHEET BASE

        if(currentLaser == 1):
            styleSheet = """
                                       QFrame{
                                      	border-radius: 110px;
                                      	background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(255, 0, 127, 0), stop:{STOP_2} rgba(85, 170, 255, 255));
                                      }
                                      """

        elif(currentLaser == 2):
            styleSheet = """
                                                   QFrame{
                                                  	border-radius: 110px;
                          	                        background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(255, 0, 127, 0), stop:{STOP_2} rgba(255, 0, 127, 255));
                                                  }
                                                  """


        else:
            styleSheet = """
                                                              QFrame{
                                                             	border-radius: 110px;
                                                             	background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(255, 0, 127, 0), stop:{STOP_2} rgba(85, 0, 127, 255));
                                                             }
                                                             """





        # GET PROGRESS BAR VALUE, CONVERT TO FLOAT AND INVERT VALUES
        # stop works of 1.000 to 0.000
        progress = (100 - value) / 100.0

        # GET NEW VALUES
        stop_1 = str(progress - 0.001)
        stop_2 = str(progress)

        # SET VALUES TO NEW STYLESHEET
        newStylesheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2)

        # APPLY STYLESHEET WITH NEW VALUES
        self.circularProgressCPU.setStyleSheet(newStylesheet)


    def slideLeftMenu(self):
        # Get current left menu width
        width = self.left_side_menu.width()

        # If minimized
        if width == 50:
            # Expand menu
            newWidth = 150
        # If maximized
        else:
            # Restore menu
            newWidth = 50

        # Animate the transition
        self.animation = QPropertyAnimation(self.left_side_menu, b"minimumWidth")  # Animate minimumWidht
        self.animation.setDuration(250)
        self.animation.setStartValue(width)  # Start value is the current menu width
        self.animation.setEndValue(newWidth)  # end value is the new menu width
        self.animation.setEasingCurve(QEasingCurve.InOutQuart)
        self.animation.start()

    def closeEvent(self, event):
        global laser1ON, laser2ON, liveModus
        close = QMessageBox.question(self,
                                     "QUIT",
                                     "Sure?",
                                     QMessageBox.Yes | QMessageBox.No)
        if close == QMessageBox.Yes:
            event.accept()
            if laser1ON:
                Controller.LaserOff(LASER['blue'])
            if laser2ON:
                Controller.LaserOff(LASER['red'])
            if laser3ON:
                Controller.LaserOff(LASER['purple'])
            if liveModus:
                liveModus = False

            Controller.Disconnect()
        else:
            event.ignore()

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.camera_button.setText(_translate("MainWindow", "CAMERA"))
        self.stage_button.setText(_translate("MainWindow", "STAGES"))
        self.laser_button.setText(_translate("MainWindow", "LASER"))
        self.label_3.setText(_translate("MainWindow", "Select Camera"))
        self.label.setText(_translate("MainWindow", "Frequency in MHZ"))
        self.label_2.setText(_translate("MainWindow", "Number of Phases "))
        self.label_4.setText(_translate("MainWindow", "Filter Position"))
        self.delayLabel.setText(_translate("MainWindow", "Delay Time "))
        self.exposureLabel.setText(_translate("MainWindow", "exposure Time "))
        self.SetConfigurationButton.setText(_translate("MainWindow", "Set Configuration"))
        self.relativBewegung.setText(_translate("MainWindow", "Please enter the relative value "))
        self.autoFocus.setText(_translate("MainWindow", "Set Auto Focus"))
        self.autoFocusLabel.setText(_translate("MainWindow", "Autofocus inactiv "))
        self.focusUpButton.setText(_translate("MainWindow", "Use as Focus UP"))
        self.focusUp_label.setText(_translate("MainWindow", "Click to store Focus"))
        self.focusDownButton.setText(_translate("MainWindow", "Use as focus Down "))
        self.focusDown_label.setText(_translate("MainWindow", "Click to store Focus"))
        self.laserLabel.setText(_translate("MainWindow", "Laser 1"))

        self.wavelengthInfo.setText(
            _translate("MainWindow", "<html><head/><body><p>WaveLength = 488mm<br/></p></body></html>"))
        self.laser1_percentage.setText(_translate("MainWindow",
                                                  "<p align=\"center\"><span style=\" font-size:50pt;\">0</span><span style=\" font-size:40pt; vertical-align:super;\">%</span></p>"))




class MySpinnbox(QDoubleSpinBox):
    keyPressed = pyqtSignal()

    def keyPressEvent(self, event):
        super(MySpinnbox, self).keyPressEvent(event)
        if event.key() == Qt.Key_Return:
            self.keyPressed.emit()


class MyCustomQLabel(QLabel):
    mousepressed = pyqtSignal()

    def mousePressEvent(self, QMouseEvent):
        global zoomModus, cursorPosition, zoomfactor
        lastPoint = QMouseEvent.pos()
        xp = lastPoint.x()
        yp = lastPoint.y()
        cursorPosition[0] = xp
        cursorPosition[1] = yp

        ##print("x_p ={} , y_p = {} ".format(xp,yp))

        if QMouseEvent.button() == Qt.LeftButton:
            zoomModus = True
            if zoomfactor < 16:
                zoomfactor *= 2



        elif QMouseEvent.button() == Qt.RightButton:
            zoomModus = False
            zoomfactor = 1


class Ui_SplashScreen(QObject):

    def __init__(self, *args, **kwargs):
        super(Ui_SplashScreen, self).__init__(*args, **kwargs)
       # self.th = SplaschsreenThread(self)
        #self.th.hardware_Connection.connect(self.setData)
       # self.th.start()


    def setupUi(self, SplashScreen):
        if SplashScreen.objectName():
            SplashScreen.setObjectName(u"SplashScreen")
        SplashScreen.resize(340, 340)
        self.centralwidget = QWidget(SplashScreen)
        self.centralwidget.setObjectName(u"centralwidget")
        self.circularProgressBarBase = QFrame(self.centralwidget)
        self.circularProgressBarBase.setObjectName(u"circularProgressBarBase")
        self.circularProgressBarBase.setGeometry(QRect(10, 10, 320, 320))
        self.circularProgressBarBase.setFrameShape(QFrame.NoFrame)
        self.circularProgressBarBase.setFrameShadow(QFrame.Raised)
        self.circularProgress = QFrame(self.circularProgressBarBase)
        self.circularProgress.setObjectName(u"circularProgress")
        self.circularProgress.setGeometry(QRect(10, 10, 300, 300))
        self.circularProgress.setStyleSheet(u"QFrame{\n"
                                            "	border-radius: 150px;\n"
                                            "	background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:0.749 rgba(255, 0, 127, 0), stop:0.750 rgba(85, 170, 255, 255));\n"
                                            "}")
        self.circularProgress.setFrameShape(QFrame.NoFrame)
        self.circularProgress.setFrameShadow(QFrame.Raised)
        self.circularBg = QFrame(self.circularProgressBarBase)
        self.circularBg.setObjectName(u"circularBg")
        self.circularBg.setGeometry(QRect(10, 10, 300, 300))
        self.circularBg.setStyleSheet(u"QFrame{\n"
                                      "	border-radius: 150px;\n"
                                      "	background-color: rgba(77, 77, 127, 120);\n"
                                      "}")
        self.circularBg.setFrameShape(QFrame.NoFrame)
        self.circularBg.setFrameShadow(QFrame.Raised)
        self.container = QFrame(self.circularProgressBarBase)
        self.container.setObjectName(u"container")
        self.container.setGeometry(QRect(25, 25, 270, 270))
        self.container.setStyleSheet(u"QFrame{\n"
                                     "	border-radius: 135px;\n"
                                     "	background-color: rgb(77, 77, 127);\n"
                                     "}")
        self.container.setFrameShape(QFrame.NoFrame)
        self.container.setFrameShadow(QFrame.Raised)
        self.widget = QWidget(self.container)
        self.widget.setObjectName(u"widget")
        self.widget.setGeometry(QRect(40, 50, 193, 191))
        self.gridLayout = QGridLayout(self.widget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.labelTitle = QLabel(self.widget)
        self.labelTitle.setObjectName(u"labelTitle")
        font = QFont()
        font.setFamily(u"Segoe UI")
        font.setPointSize(12)
        self.labelTitle.setFont(font)
        self.labelTitle.setStyleSheet(u"background-color: none;\n"
                                      "color: #FFFFFF")
        self.labelTitle.setAlignment(Qt.AlignCenter)

        self.gridLayout.addWidget(self.labelTitle, 0, 0, 1, 1)

        self.labelPercentage = QLabel(self.widget)
        self.labelPercentage.setObjectName(u"labelPercentage")
        font1 = QFont()
        font1.setFamily(u"Roboto Thin")
        font1.setPointSize(68)
        self.labelPercentage.setFont(font1)
        self.labelPercentage.setStyleSheet(u"background-color: none;\n"
                                           "color: #FFFFFF")
        self.labelPercentage.setAlignment(Qt.AlignCenter)

        self.gridLayout.addWidget(self.labelPercentage, 1, 0, 1, 1)

        self.labelLoadingInfo = QLabel(self.widget)
        self.labelLoadingInfo.setObjectName(u"labelLoadingInfo")
        self.labelLoadingInfo.setMinimumSize(QSize(0, 20))
        self.labelLoadingInfo.setMaximumSize(QSize(16777215, 20))
        font2 = QFont()
        font2.setFamily(u"Segoe UI")
        font2.setPointSize(9)
        self.labelLoadingInfo.setFont(font2)
        self.labelLoadingInfo.setStyleSheet(u"QLabel{\n"
                                            "	border-radius: 10px;	\n"
                                            "	background-color: rgb(93, 93, 154);\n"
                                            "	color: #FFFFFF;\n"
                                            "	margin-left: 40px;\n"
                                            "	margin-right: 40px;\n"
                                            "}")
        self.labelLoadingInfo.setFrameShape(QFrame.NoFrame)
        self.labelLoadingInfo.setAlignment(Qt.AlignCenter)

        self.gridLayout.addWidget(self.labelLoadingInfo, 2, 0, 1, 1)

        self.labelCredits = QLabel(self.widget)
        self.labelCredits.setObjectName(u"labelCredits")
        self.labelCredits.setFont(font2)
        self.labelCredits.setStyleSheet(u"background-color: none;\n"
                                        "color: rgb(155, 155, 255);")
        self.labelCredits.setAlignment(Qt.AlignCenter)

        self.gridLayout.addWidget(self.labelCredits, 3, 0, 1, 1)

        self.circularBg.raise_()
        self.circularProgress.raise_()
        self.container.raise_()
        SplashScreen.setCentralWidget(self.centralwidget)

        self.retranslateUi(SplashScreen)

        QMetaObject.connectSlotsByName(SplashScreen)

        ## ==> SET INITIAL PROGRESS BAR TO (0) ZERO
        self.progressBarValue(0)

        ## ==> REMOVE STANDARD TITLE BAR
        SplashScreen.setWindowFlags(Qt.FramelessWindowHint)  # Remove title bar
        SplashScreen.setAttribute(Qt.WA_TranslucentBackground)  # Set background to transparent

        ## ==> APPLY DROP SHADOW EFFECT
        self.shadow = QGraphicsDropShadowEffect()
        self.shadow.setBlurRadius(20)
        self.shadow.setXOffset(0)
        self.shadow.setYOffset(0)
        self.shadow.setColor(QColor(0, 0, 0, 120))
        self.circularBg.setGraphicsEffect(self.shadow)

        ## QTIMER ==> START
        self.timer = QTimer()
        self.timer.timeout.connect(self.progress)
        # TIMER IN MILLISECONDS
        self.timer.start(50)

        ## DEF TO LOANDING
        ########################################################################

    # @pyqtSlot(int)
    # def setData(self, processStatus):
    #     if (processStatus):
    #         print("Process stop")
    #         self.th.stop()



    def progress(self):
        global counter
        global jumper
        global notConnectedHardware
        value = counter

        # HTML TEXT PERCENTAGE
        htmlText = """<p><span style=" font-size:68pt;">{VALUE}</span><span style=" font-size:58pt; vertical-align:super;">%</span></p>"""

        # REPLACE VALUE
        newHtml = htmlText.replace("{VALUE}", str(jumper))

        if (value > jumper):
            # APPLY NEW PERCENTAGE TEXT
            self.labelPercentage.setText(newHtml)
            jumper += 1

        # SET VALUE TO PROGRESS BAR
        # fix max value error if > than 100
        if value >= 100: value = 1.000
        self.progressBarValue(value)

        # CLOSE SPLASH SCREE AND OPEN APP
        if counter > 100:
            # STOP TIMER
            self.timer.stop()

            # SHOW MAIN WINDOW
            w.show()


            SplashScreen.close()
            if (len(notConnectedHardware) > 0):
                msg = QMessageBox()
                msg.setWindowTitle("Warning Box")
                msg.setText("Failed to connect with some devices")
                msg.setIcon(QMessageBox.Question)
                msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Retry | QMessageBox.Ignore)
                msg.setDefaultButton(QMessageBox.Retry)

                listHardware = ""

                for device in notConnectedHardware:
                    listHardware = listHardware + device + "\n"

                msg.setDetailedText(listHardware)
                msg.exec_()

        # INCREASE COUNTER
        counter += 0.5

        ## DEF PROGRESS BAR VALUE
        ########################################################################

    def progressBarValue(self, value):

        # PROGRESSBAR STYLESHEET BASE
        styleSheet = """
                QFrame{
                	border-radius: 150px;
                	background-color: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(255, 0, 127, 0), stop:{STOP_2} rgba(85, 170, 255, 255));
                }
                """

        # GET PROGRESS BAR VALUE, CONVERT TO FLOAT AND INVERT VALUES
        # stop works of 1.000 to 0.000
        progress = (100 - value) / 100.0

        # GET NEW VALUES
        stop_1 = str(progress - 0.001)
        stop_2 = str(progress)

        # SET VALUES TO NEW STYLESHEET
        newStylesheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2)

        # APPLY STYLESHEET WITH NEW VALUES
        self.circularProgress.setStyleSheet(newStylesheet)

    # setupUi

    def retranslateUi(self, SplashScreen):
        SplashScreen.setWindowTitle(QCoreApplication.translate("SplashScreen", u"MainWindow", None))
        self.labelTitle.setText(QCoreApplication.translate("SplashScreen",
                                                           u"<html><head/><body><p><span style=\" font-weight:600; color:#9b9bff;\">Initalizing</span>LSFM_Desk App</p></body></html>",
                                                           None))
        self.labelPercentage.setText(QCoreApplication.translate("SplashScreen",
                                                                u"<p><span style=\" font-size:68pt;\">0</span><span style=\" font-size:58pt; vertical-align:super;\">%</span></p>",
                                                                None))
        self.labelLoadingInfo.setText(QCoreApplication.translate("SplashScreen", u"loading...", None))
        self.labelCredits.setText(
            QCoreApplication.translate("SplashScreen", u"Licenced by Universität Medizin Göttingen", None))
    # retranslateUi


class qDialCustom(QDial, Ui_MainWindow):

    def mouseReleaseEvent(self, event):
        global combobox2_text, positionTarget, listControllersView, current_action, actionText

        if (
                combobox2_text == "X Controller" or combobox2_text == "Y Controller" or combobox2_text == "Focus Controller" or "Z Controller"):
            actionText = "Movement to the requested position in process"
            current_action = 2
            dial = Dialog1()
            dial.show()
            dial.exec_()
        else:
            self.ShowErrorMessage("Error", "Please select at first one Controller")


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent=parent)
        self.setupUi(self)




if __name__ == "__main__":
    try:
        connect_hardware()
        app = QApplication(sys.argv)
        SplashScreen = QMainWindow()

        ui = Ui_SplashScreen()
        ui.setupUi(SplashScreen)
        w = MainWindow()

        SplashScreen.show()
        sys.exit(app.exec_())

    except (RuntimeError, TypeError, NameError, OSError)as error:
        print("OS error: {0}".format(error))
